version: 0.2

# env:
#   parameter-store:
#     key: "value"
#     AWS_DEFAULT_REGION: "AWS_DEFAULT_REGION"
#     DOCKER_USERNAME: "DOCKER_USERNAME"
#     AWS_ACCOUNT_ID: "AWS_ACCOUNT_ID"
#     IMAGE_REPO_NAME: "IMAGE_REPO_NAME"
#     IMAGE_TAG: "IMAGE_TAG"
#     CLIENT_PORT: "CLIENT_PORT"
#     DOCKER_PORT: "DOCKER_PORT"
#     DOCKER_ENV1_KEY: "DOCKER_ENV1_KEY"
#     DOCKER_ENV1_VALUE: "DOCKER_ENV1_VALUE"
#     DOCKER_ENV2_KEY: "DOCKER_ENV2_KEY"
#     DOCKER_ENV2_VALUE: "DOCKER_ENV2_VALUE"
#   exported-variables:
#     - variable
#     - variable
#   secrets-manager:
#     key: secret-id:json-key:version-stage:version-id
#     AWS_DEFAULT_REGION: "dev/hello_app:AWS_DEFAULT_REGION"
#     DOCKER_USERNAME: "dev/hello_app:DOCKER_USERNAME"
#     AWS_ACCOUNT_ID: "dev/hello_app:AWS_ACCOUNT_ID"
#     IMAGE_REPO_NAME: "dev/hello_app:IMAGE_REPO_NAME"
#     IMAGE_TAG: "dev/hello_app:IMAGE_TAG"
#     CLIENT_PORT: "dev/hello_app:CLIENT_PORT"
#     DOCKER_PORT: "dev/hello_app:DOCKER_PORT"
#     DOCKER_ENV1_KEY: "dev/hello_app:DOCKER_ENV1_KEY"
#     DOCKER_ENV1_VALUE: "dev/hello_app:DOCKER_ENV1_VALUE"
#     DOCKER_ENV2_KEY: "dev/hello_app:DOCKER_ENV2_KEY"
#     DOCKER_ENV2_VALUE: "dev/hello_app:DOCKER_ENV2_VALUE"
#   git-credential-helper: no | yes

phases:
  install:
    runtime-versions:
      python: 3.8
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - python3 --version
      - pip3 install --upgrade pip
      - pip3 install --upgrade awscli
      - docker info
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - ls
      - cd app
      - docker build -t $IMAGE_REPO_NAME:latest .
      #- docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$COMMIT_HASH
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker ls
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      #- docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$COMMIT_HASH
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - echo Writing image definition file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME, $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG> imgedefinitions.json
artifacts:
  files:
    - appspec.yml
    - installApp.sh
    - imgedefinitions.json